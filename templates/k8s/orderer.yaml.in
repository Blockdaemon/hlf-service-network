---
apiVersion: v1
kind: Service
metadata:
  name: orderer0
  labels:
    app: fabric-orderer
    org: {{env.DOMAIN}}
    role: orderer
  annotations:
    external-dns.alpha.kubernetes.io/hostname: orderer0.{{env.DOMAIN}}.
spec:
  ports:
  - port: 7050
    protocol: TCP
    name: orderer
  selector:
    app: fabric-orderer
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  name: orderer0-ops
  labels:
    app: fabric-orderer
spec:
  # Headless
  clusterIP: None
  ports:
  - port: 8443
    protocol: TCP
    name: operations
  selector:
    app: fabric-orderer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fabric-orderer
  labels:
    app: fabric-orderer
    org: {{env.DOMAIN}}
    role: orderer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: fabric-orderer
  template:
    metadata:
      labels:
        app: fabric-orderer
        org: {{env.DOMAIN}}
        role: orderer
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '8443'
    spec:
      volumes:
        - name: orderer-genesis-block-secrets
          secret:
            secretName: orderer-genesis-block
        - name: orderer-tls-secrets
          secret:
            secretName: orderer-tls
        - name: orderer-msp-volume
          configMap:
            name: orderer-msp
            items:
              {% for msp in ['ca','tlsca','admin','sign'] %}
              - key: {{msp}}-cert.pem
                path: {{msp}}certs/{{msp}}-cert.pem
              {% endfor %}
        - name: orderer-msp-keystore-secrets
          secret:
            secretName: orderer-msp-keystore
      hostname: orderer0
      containers:
        - name: orderer0
          image: hyperledger/fabric-orderer:{{env.HLF_ARCH}}-{{env.HLF_VERSION}}
          imagePullPolicy: Always
          command: ['orderer']
          #command: [ "/bin/bash", "-c", "--" ]
          #args: [ "while true; do sleep 30; done;" ]
          env:
            - name: FABRIC_LOGGING_SPEC
              value: "DEBUG"
            - name: ORDERER_GENERAL_LISTENADDRESS
              value: "0.0.0.0"
            - name: ORDERER_GENERAL_LISTENPORT
              value: "7050"
            - name: ORDERER_GENERAL_GENESISPROFILE
              value: "{{env.PROFILE}}"
            - name: ORDERER_GENERAL_GENESISMETHOD
              value: "file"
            - name: ORDERER_GENERAL_GENESISFILE
              value: "/var/hyperledger/orderer/orderer0.genesis.block"
            - name: ORDERER_GENERAL_LOCALMSPID
              value: "{{env.DOMAIN}}"
            - name: ORDERER_GENERAL_LOCALMSPDIR
              value: "/var/hyperledger/msp"
            - name: ORDERER_GENERAL_TLS_ENABLED
              value: "true"
            - name: ORDERER_GENERAL_TLS_CERTIFICATE
              value: "/var/hyperledger/tls/server.crt"
            - name: ORDERER_GENERAL_TLS_PRIVATEKEY
              value: "/var/hyperledger/tls/server.key"
            - name: ORDERER_GENERAL_TLS_ROOTCAS
              value: "[/var/hyperledger/tls/ca.crt]"
            - name: ORDERER_OPERATIONS_LISTENADDRESS
              value: ":8443"
          ports:
            - containerPort: 7050
            - containerPort: 8443
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8443
          volumeMounts:
            # FIXME: put in configMap?
            - name: orderer-genesis-block-secrets
              mountPath: /var/hyperledger/orderer
            - name: orderer-tls-secrets
              mountPath: /var/hyperledger/tls
            - name: orderer-msp-volume
              mountPath: /var/hyperledger/msp
            - name: orderer-msp-keystore-secrets
              mountPath: /var/hyperledger/msp/keystore
---
# vim: sw=2:expandtab
